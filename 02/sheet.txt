let's start the topic 


-----------------------
let , var , const 


let a = 10
console.log(a)
a = 23 //reassigning
console.log(a)
let a = 12 // redeclaring, SyntaxError: Identifier 'a' has already been declared
console.log(a)

// let can never be redeclared in the same scope
// let can be reassigned




var a = 10 
console.log(a)
a = 23
console.log(a)
var a = 12
console.log(a)

// var can be redeclared and reassigned



const a = 10
console.log(a) 
a = 23 // TypeError: Assignment to constant variable
console.log(a)
const a = 12 // SyntaxError: Identifier 'a' has already been declared
console.log(a)




-----------------------

closure 

closure happens when ? 
1. function is inside another function 
2. inner function remembers the variables from the outer functions even 
after the outer function is finished. 


explain 2. 

when you create a function inside another function 
inner function can still use the variables declared in the outer one 
even if outer function is finished running 


example 

function greet(){
    let name = "mayank"

    return function(){
        console.log("hello " + name)
    }
}


console.log(name) // ReferenceError: name is not defined

let say = greet();
console.log(say); // function anonymous

console.log(say()); // hello mayank 



closure. --- basic real world anaology 


just see it as 
baby ek function h 
aur parent ek function h 
jb parent mar jate h 
fir bhi baby unki memories ko zinda rkhta h in terms of variable 
that is something like closure 






// closure. 
// real world use case 
function counterMaker(){

    let count = 0; 

    return function(){
        count++;
        console.log(count);
    }
}
let counter = counterMaker();   //1
let counter2 = counterMaker();
counter(); // 1 
counter2(); 
counter();  // 1 aani chahiye na 
counter(); 
counter(); 
counter2();

wht happened and why we did it this way ? why closure ? 
counterMaker was a function that made a secret count variable that 
can't be accessed directly 
it returns a function that can change that count number 
count is rembered each time you call variable that you have made 
even though counterMaker is finished running the inner function still 
remembers the count 






---------------




function cookieJar(){
    let cookies = 10; 


    return function(){
        if(cookies>0){
            cookies--;
            console.log("you eat one cooikie, cookies left: " + cookies);

        }
        else{
            console.log("no cookies left");
        }
    }
}

let eatCookie = cookieJar();

eatCookie();
eatCookie();
eatCookie();
eatCookie();
eatCookie();

cookies--;
eatCookie();
console.log("cookies left: " + cookies); 

-----------------------------



function m(x){

    return function(y=4){
        return x + y;
    }


}

const double =m(2)(19)
console.log(double(1));

//TypeError: double is not a function


--------------------------------


function greet(name,cb = function() {
    console.log("Default callback executed.");
})     {
    console.log("Hello " + name);
    cb();
    let a = cb(); 
    console.log("Callback returned: " + a);
}

greet("Alice", function() {


    console.log("Callback executed after greeting.");



    return "aaa"
    console.log(" after returnCallback executed after greeting.");
    console.log(" after returnCallback executed after greeting.");
    console.log(" after returnCallback executed after greeting.");
    console.log(" after returnCallback executed after greeting.");
    console.log(" after returnCallback executed after greeting.");
    console.log(" after returnCallback executed after greeting.");
    console.log(" after returnCallback executed after greeting.");
    console.log(" after returnCallback executed after greeting.");

});
---------------------------------


IIFE 

immedieately invoked function expression 

you write a function and run it immedieately without calling it later 


usefulness? 
creates pvt variable -- anything inside stay hidden 
avoid pollution in global scope 


(function(){
....
})()

OR 

(() => {
.....
})();




let secret_information = (function(){

    let user = 'jha';
    console.log("user is " + user);
    
    return("jha is gay");
    
    
})()


console.log("jha ka sach neche hai");
console.log(secret_information);



------------------
ECMAScript 

what is this ? 
it is the offical standard for js 


history 
1995 js was born 

Netscape  --- big rule in js 

1997 ECMAScript 1 
------------------------------

