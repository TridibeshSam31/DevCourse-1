Starting with the basic info of Prisma here as per the lecture 

Orms ? What are orms 
basically Orms is a type of layer that helps in providing services similar to mongoose as we do to write our schema similarly prisma is there 
means mongoose helps us to interact with our db for eg mongodb so its an orm 

Easier to digest defination
ORMs let you easily interact with your database without worrying too much about the underlying syntax (SQL language for eg)

Why do we need ORMs?? 
1.impler syntax (converts objects to SQL queries under the hood)
means it provides us certain methods to interact with our db 

for eg if we do not have Orm then how will be write code?

const query = 'SELECT *FROM users WHERE email = $1'(sql injection prevention)
const result = await client.query(query,("tridisam651@gmail.com"))

now if we have any orm like prima then it will give us many methods for writting the similar code above in the shortest foem 

User.find({
    email:"tridibeshsam@gmail.com"
})


2. Abstraction that lets you flip the database you are using. Unified API irrespective of the DB
3. Type safety/Auto completion
type safety obv  typescript supportive and event without using ai it gives us suggestions for interaction with db 
4.Automatic migrations
automatic migrations means converting the current schema in some other lang for eg we can convert postgress type db to sql using migrations
In case of a simple Postgres app, it‚Äôs very hard to keep track of all the commands that were ran that led to the current schema of the table.

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100) UNIQUE NOT NULL
);

ALTER TABLE users
ADD COLUMN phone_number VARCHAR(15);


as the app becomes more complex and big this makes our db very very much complex so in order to mantain it we reqiuire an orm 



What is Prisma ?
we know its an orm that is required for the connecting with our db

Prisma unlocks a new level of developer experience when working with databases thanks to its intutive DATA MODEL,AUTOMATED MIGRATIONS,TYPE SAFETY AND AUTO COMPLETIONS
SO WHAT IS DATA MODEL ?? WE know some of the termns like migrations type safety from the above discussions

DATA MODEL 
In a single file, define your schema. What it looks like, what tables you have, what field each table has, how are rows related to each other.

Prisma lets you chose between a few databases (MySQL, Postgres, Mongo)
You can update prisma/schema.prisma  to setup what database you want to use. 


Also replace the database url with your test url for now

We did all this with cloudinary saas so no need to do so all migrations are done on that project


If we have psql then we can try to explore the tables that prisma created for us

psql -h localhost -d postgres -U postgres
this is the command we have to run in the terminal

Generating the Prisma client

What is a client and what is autogenerated client ??

client in prisma is known as prisma client 
Its a runtime library you import into your app to talk to your database
Think of it as:

Prisma schema = blueprint of your database.
Prisma migrate = syncs your schema with the actual DB.
Prisma generate = creates the client code.
Prisma Client = the thing you actually use in your Node.js/TS code to query the DB.


it is generally  a database query builder generated for our schema
it lives in our project after prisma generate

we import like this
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();


Then use it for CRUD:
const users = await prisma.user.findMany();
const newUser = await prisma.user.create({
  data: { email: "x@y.com" },
});

now what is authogenerated client then ??
When you run npx prisma generate, Prisma auto-generates a type-safe client library (basically, code) for your project. This is called the Prisma Client.

What that actually means

Prisma reads your schema.prisma file.

From that schema, it auto-creates a custom query builder library in JavaScript/TypeScript.

That generated code is stored (by default) in node_modules/.prisma/client or a custom path if configured.

You don‚Äôt have to hand-write SQL or raw database queries ‚Äî you just import and use the Prisma Client, and it has all the methods and types tailored to your exact database schema.

Example
Suppose your schema has:
model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}


After prisma generate, the client exposes:
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

// Autogenerated client methods
await prisma.user.findMany()
await prisma.user.create({ data: { email: "a@b.com" } })
await prisma.user.update({ where: { id: 1 }, data: { name: "Tridibesh" } })


Notice:

prisma.user exists only because you had a User model.

The methods (findMany, create, update, etc.) are autogenerated.

They are strongly typed ‚Äî TypeScript will autocomplete fields (email, name) and warn you on typos.

Why this matters

Type safety ‚Üí fewer runtime bugs.

Productivity ‚Üí no need to write repetitive boilerplate queries.

Schema-driven ‚Üí update schema ‚Üí regenerate client ‚Üí updated methods/types instantly available.

üëâ In short: the ‚Äúautogenerated client‚Äù is your schema-aware, type-safe query builder that Prisma builds for you whenever you run prisma generate.


How to generate the client ?
npx prisma generate 

Now we will se how to insert update  and  get a user detail using prisma

Rest relationships will be covered in offline lectures




Assignment for this week
Try creating a todo application that let‚Äôs a user signup, put todos and fetch todos. 
Use 
1.Typescript as the language
2.Prisma as the ORM
3.Postgres as the database
4.Zod as validation library




